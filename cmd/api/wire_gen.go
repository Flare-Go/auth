// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"goflare.io/auth/internal/authentication"
	"goflare.io/auth/internal/authorization"
	"goflare.io/auth/internal/config"
	"goflare.io/auth/internal/firebase"
	"goflare.io/auth/internal/handler"
	"goflare.io/auth/internal/middleware"
	"goflare.io/auth/internal/role"
	"goflare.io/auth/internal/server"
	"goflare.io/auth/internal/user"
)

// Injectors from wire.go:

func InitializeAuthService() (*server.Server, error) {
	configConfig, err := config.ProvideApplicationConfig()
	if err != nil {
		return nil, err
	}
	postgresPool, err := config.ProvidePostgresConn(configConfig)
	if err != nil {
		return nil, err
	}
	logger := config.NewLogger()
	repository := user.NewRepository(postgresPool, logger)
	enforcer, err := config.ProvideEnforcer(configConfig, logger)
	if err != nil {
		return nil, err
	}
	service := authentication.NewService(repository, configConfig, enforcer, logger)
	authenticationMiddleware := middleware.NewAuthenticationMiddleware(service)
	firebaseService, err := firebase.NewService(repository, configConfig, logger)
	if err != nil {
		return nil, err
	}
	userHandler := handler.NewUserHandler(service, firebaseService, logger)
	roleRepository := role.NewRepository(postgresPool, logger)
	authorizationService := authorization.NewService(repository, roleRepository, enforcer, logger)
	serverServer := server.NewServer(authenticationMiddleware, userHandler, service, authorizationService, logger)
	return serverServer, nil
}
