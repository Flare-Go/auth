// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ActionType string

const (
	ActionTypeCREATE ActionType = "CREATE"
	ActionTypeREAD   ActionType = "READ"
	ActionTypeUPDATE ActionType = "UPDATE"
	ActionTypeDELETE ActionType = "DELETE"
	ActionTypeLIST   ActionType = "LIST"
)

func (e *ActionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ActionType(s)
	case string:
		*e = ActionType(s)
	default:
		return fmt.Errorf("unsupported scan type for ActionType: %T", src)
	}
	return nil
}

type NullActionType struct {
	ActionType ActionType `json:"actionType"`
	Valid      bool       `json:"valid"` // Valid is true if ActionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullActionType) Scan(value interface{}) error {
	if value == nil {
		ns.ActionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ActionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullActionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ActionType), nil
}

func (e ActionType) Valid() bool {
	switch e {
	case ActionTypeCREATE,
		ActionTypeREAD,
		ActionTypeUPDATE,
		ActionTypeDELETE,
		ActionTypeLIST:
		return true
	}
	return false
}

type ProviderType string

const (
	ProviderTypeEmail  ProviderType = "email"
	ProviderTypeGoogle ProviderType = "google"
	ProviderTypeApple  ProviderType = "apple"
)

func (e *ProviderType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProviderType(s)
	case string:
		*e = ProviderType(s)
	default:
		return fmt.Errorf("unsupported scan type for ProviderType: %T", src)
	}
	return nil
}

type NullProviderType struct {
	ProviderType ProviderType `json:"providerType"`
	Valid        bool         `json:"valid"` // Valid is true if ProviderType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProviderType) Scan(value interface{}) error {
	if value == nil {
		ns.ProviderType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProviderType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProviderType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProviderType), nil
}

func (e ProviderType) Valid() bool {
	switch e {
	case ProviderTypeEmail,
		ProviderTypeGoogle,
		ProviderTypeApple:
		return true
	}
	return false
}

type ResourceType string

const (
	ResourceTypeUSER       ResourceType = "USER"
	ResourceTypeROLE       ResourceType = "ROLE"
	ResourceTypePERMISSION ResourceType = "PERMISSION"
	ResourceTypePRODUCT    ResourceType = "PRODUCT"
	ResourceTypeORDER      ResourceType = "ORDER"
)

func (e *ResourceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ResourceType(s)
	case string:
		*e = ResourceType(s)
	default:
		return fmt.Errorf("unsupported scan type for ResourceType: %T", src)
	}
	return nil
}

type NullResourceType struct {
	ResourceType ResourceType `json:"resourceType"`
	Valid        bool         `json:"valid"` // Valid is true if ResourceType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullResourceType) Scan(value interface{}) error {
	if value == nil {
		ns.ResourceType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ResourceType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullResourceType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ResourceType), nil
}

func (e ResourceType) Valid() bool {
	switch e {
	case ResourceTypeUSER,
		ResourceTypeROLE,
		ResourceTypePERMISSION,
		ResourceTypePRODUCT,
		ResourceTypeORDER:
		return true
	}
	return false
}

type Permission struct {
	ID          uint64             `json:"id"`
	Name        string             `json:"name"`
	Description *string            `json:"description"`
	Resource    ResourceType       `json:"resource"`
	Action      ActionType         `json:"action"`
	CreatedAt   pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt   pgtype.Timestamptz `json:"updatedAt"`
}

type Role struct {
	ID          uint64             `json:"id"`
	Name        string             `json:"name"`
	Description *string            `json:"description"`
	CreatedAt   pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt   pgtype.Timestamptz `json:"updatedAt"`
}

type RolePermission struct {
	RoleID       uint64 `json:"roleId"`
	PermissionID uint64 `json:"permissionId"`
}

type User struct {
	ID           uint64             `json:"id"`
	Username     string             `json:"username"`
	PasswordHash string             `json:"passwordHash"`
	Email        string             `json:"email"`
	Phone        string             `json:"phone"`
	FirebaseUid  *string            `json:"firebaseUid"`
	Provider     ProviderType       `json:"provider"`
	DisplayName  *string            `json:"displayName"`
	PhotoUrl     *string            `json:"photoUrl"`
	CreatedAt    pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt    pgtype.Timestamptz `json:"updatedAt"`
}

type UserRole struct {
	UserID uint64 `json:"userId"`
	RoleID uint64 `json:"roleId"`
}
