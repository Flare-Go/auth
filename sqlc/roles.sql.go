// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: roles.sql

package sqlc

import (
	"context"
)

const createRole = `-- name: CreateRole :exec
INSERT INTO roles (name, description)
VALUES ($1, $2)
`

type CreateRoleParams struct {
	Name        string  `json:"name"`
	Description *string `json:"description"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) error {
	_, err := q.db.Exec(ctx, createRole, arg.Name, arg.Description)
	return err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles WHERE id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id uint64) error {
	_, err := q.db.Exec(ctx, deleteRole, id)
	return err
}

const getRoleByID = `-- name: GetRoleByID :one
SELECT name, description FROM roles WHERE id = $1
`

type GetRoleByIDRow struct {
	Name        string  `json:"name"`
	Description *string `json:"description"`
}

func (q *Queries) GetRoleByID(ctx context.Context, id uint64) (*GetRoleByIDRow, error) {
	row := q.db.QueryRow(ctx, getRoleByID, id)
	var i GetRoleByIDRow
	err := row.Scan(&i.Name, &i.Description)
	return &i, err
}

const listRoles = `-- name: ListRoles :many
SELECT id, name, description FROM roles
`

type ListRolesRow struct {
	ID          uint64  `json:"id"`
	Name        string  `json:"name"`
	Description *string `json:"description"`
}

func (q *Queries) ListRoles(ctx context.Context) ([]*ListRolesRow, error) {
	rows, err := q.db.Query(ctx, listRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListRolesRow{}
	for rows.Next() {
		var i ListRolesRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
